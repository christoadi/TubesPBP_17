Index: app/src/main/java/com/example/ugd1/HomeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ugd1\r\n\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.os.PersistableBundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport androidx.fragment.app.Fragment\r\nimport kotlinx.android.synthetic.main.activity_home.*\r\nimport nl.joery.animatedbottombar.AnimatedBottomBar\r\n\r\nclass HomeActivity : AppCompatActivity() {\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_home)\r\n\r\n        sharedPreferences = getSharedPreferences(\"login\", Context.MODE_PRIVATE)\r\n        setTitle(\"User Menu\")\r\n\r\n        getSupportActionBar()?.hide()\r\n//        var bottomNavigationView: BottomNavigationView = findViewById(R.id.nav_view)\r\n        val home = HomeFragment()\r\n        val loc = LocationFragment()\r\n        val memberGym = MemberGymFragment()\r\n        val profile = ProfilFragment()\r\n\r\n        setThatFragments(home)\r\n//\r\n//        bottomNavigationView.setOnItemSelectedListener{\r\n//            when(it.itemId){\r\n//                R.id.navigation_home -> {\r\n//                    setThatFragments(home)\r\n//                }\r\n//                R.id.navigation_location -> {\r\n//                    setThatFragments(loc)\r\n//                }\r\n//                R.id.navigation_memberGym -> {\r\n//                    setThatFragments(memberGym)\r\n//                }\r\n//                R.id.navigation_profile -> {\r\n//                    setThatFragments(profile)\r\n//                }\r\n//            }\r\n//            true\r\n//        }\r\n\r\n        nav_view.setOnTabSelectListener(object : AnimatedBottomBar.OnTabSelectListener {\r\n            override fun onTabSelected(\r\n                lastIndex: Int,\r\n                lastTab: AnimatedBottomBar.Tab?,\r\n                newIndex: Int,\r\n                newTab: AnimatedBottomBar.Tab\r\n            ) {\r\n\r\n                //redirecting fragments\r\n                when(newIndex){\r\n                    0 -> setThatFragments(home);\r\n                    1 -> setThatFragments(loc);\r\n                    2 -> setThatFragments(memberGym);\r\n                    3 -> setThatFragments(profile);\r\n                }\r\n                Log.d(\"bottom_bar\", \"Selected index: $newIndex, title: ${newTab.title}\")\r\n            }\r\n\r\n            override fun onTabReselected(index: Int, tab: AnimatedBottomBar.Tab) {\r\n                Log.d(\"bottom_bar\", \"Reselected index: $index, title: ${tab.title}\")\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setThatFragments(fragment : Fragment){\r\n        supportFragmentManager.beginTransaction().apply {\r\n            replace(R.id.layoutFragment,fragment)\r\n            commit()\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val menuInflater = MenuInflater(this)\r\n        menuInflater.inflate(R.menu.nav_home,menu)\r\n        return true\r\n    }\r\n\r\n    fun getSharedPreferences(): SharedPreferences{\r\n        return sharedPreferences\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/HomeActivity.kt b/app/src/main/java/com/example/ugd1/HomeActivity.kt
--- a/app/src/main/java/com/example/ugd1/HomeActivity.kt	
+++ b/app/src/main/java/com/example/ugd1/HomeActivity.kt	
@@ -11,7 +11,6 @@
 import com.google.android.material.bottomnavigation.BottomNavigationView
 import androidx.fragment.app.Fragment
 import kotlinx.android.synthetic.main.activity_home.*
-import nl.joery.animatedbottombar.AnimatedBottomBar
 
 class HomeActivity : AppCompatActivity() {
     private lateinit var sharedPreferences: SharedPreferences
@@ -31,47 +30,47 @@
         val profile = ProfilFragment()
 
         setThatFragments(home)
-//
-//        bottomNavigationView.setOnItemSelectedListener{
-//            when(it.itemId){
-//                R.id.navigation_home -> {
-//                    setThatFragments(home)
-//                }
-//                R.id.navigation_location -> {
-//                    setThatFragments(loc)
-//                }
-//                R.id.navigation_memberGym -> {
-//                    setThatFragments(memberGym)
-//                }
-//                R.id.navigation_profile -> {
-//                    setThatFragments(profile)
-//                }
-//            }
-//            true
-//        }
-
-        nav_view.setOnTabSelectListener(object : AnimatedBottomBar.OnTabSelectListener {
-            override fun onTabSelected(
-                lastIndex: Int,
-                lastTab: AnimatedBottomBar.Tab?,
-                newIndex: Int,
-                newTab: AnimatedBottomBar.Tab
-            ) {
 
-                //redirecting fragments
-                when(newIndex){
-                    0 -> setThatFragments(home);
-                    1 -> setThatFragments(loc);
-                    2 -> setThatFragments(memberGym);
-                    3 -> setThatFragments(profile);
+        nav_home.setOnItemSelectedListener{
+            when(it){
+                R.id.navigation_home -> {
+                    setThatFragments(home)
                 }
-                Log.d("bottom_bar", "Selected index: $newIndex, title: ${newTab.title}")
-            }
-
-            override fun onTabReselected(index: Int, tab: AnimatedBottomBar.Tab) {
-                Log.d("bottom_bar", "Reselected index: $index, title: ${tab.title}")
+                R.id.navigation_location -> {
+                    setThatFragments(loc)
+                }
+                R.id.navigation_memberGym -> {
+                    setThatFragments(memberGym)
+                }
+                R.id.navigation_profile -> {
+                    setThatFragments(profile)
+                }
             }
-        });
+            true
+        }
+
+//        nav_home.setOnTabSelectListener(object : AnimatedBottomBar.OnTabSelectListener {
+//            override fun onTabSelected(
+//                lastIndex: Int,
+//                lastTab: AnimatedBottomBar.Tab?,
+//                newIndex: Int,
+//                newTab: AnimatedBottomBar.Tab
+//            ) {
+//
+//                //redirecting fragments
+//                when(newIndex){
+//                    0 -> setThatFragments(home);
+//                    1 -> setThatFragments(loc);
+//                    2 -> setThatFragments(memberGym);
+//                    3 -> setThatFragments(profile);
+//                }
+//                Log.d("bottom_bar", "Selected index: $newIndex, title: ${newTab.title}")
+//            }
+//
+//            override fun onTabReselected(index: Int, tab: AnimatedBottomBar.Tab) {
+//                Log.d("bottom_bar", "Reselected index: $index, title: ${tab.title}")
+//            }
+//        });
     }
 
 
Index: app/src/main/java/com/example/ugd1/MemberGymFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ugd1\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.core.content.ContextCompat.getSystemService\r\nimport androidx.fragment.app.Fragment\r\n\r\nclass MemberGymFragment : Fragment() {\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        return inflater.inflate(R.layout.activity_member_gym, container, false)\r\n    }\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        val btnAdd: Button = view.findViewById(R.id.btnAdd)\r\n\r\n\r\n        btnAdd.setOnClickListener(View.OnClickListener {\r\n            val moveMemberGym = Intent(this@MemberGymFragment.context, MemberGymActivity::class.java)\r\n            startActivity(moveMemberGym)\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/MemberGymFragment.kt b/app/src/main/java/com/example/ugd1/MemberGymFragment.kt
--- a/app/src/main/java/com/example/ugd1/MemberGymFragment.kt	
+++ b/app/src/main/java/com/example/ugd1/MemberGymFragment.kt	
@@ -12,6 +12,9 @@
 import android.widget.Button
 import androidx.core.content.ContextCompat.getSystemService
 import androidx.fragment.app.Fragment
+import com.bumptech.glide.Glide
+import com.bumptech.glide.load.engine.DiskCacheStrategy
+import kotlinx.android.synthetic.main.fragment_member_gym.*
 
 class MemberGymFragment : Fragment() {
 
@@ -19,7 +22,7 @@
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View? {
-        return inflater.inflate(R.layout.activity_member_gym, container, false)
+        return inflater.inflate(R.layout.fragment_member_gym, container, false)
     }
 
 
@@ -35,6 +38,17 @@
 
 
         })
+
+        btnGlide.setOnClickListener(View.OnClickListener {
+            val url = "https://picsum.photos/300"
+
+            Glide.with(this)
+                .load(url)
+                .fitCenter()
+                .diskCacheStrategy(DiskCacheStrategy.NONE)
+                .skipMemoryCache(true)
+                .into(imageGlide)
+            })
     }
 
 
Index: app/src/androidTest/java/com/example/ugd1/EditMemberGymTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/example/ugd1/EditMemberGymTest.kt b/app/src/androidTest/java/com/example/ugd1/EditMemberGymTest.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/androidTest/java/com/example/ugd1/EditMemberGymTest.kt	
@@ -0,0 +1,219 @@
+package com.example.ugd1
+
+
+import android.view.View
+import android.view.ViewGroup
+import androidx.test.espresso.Espresso.onView
+import androidx.test.espresso.UiController
+import androidx.test.espresso.ViewAction
+import androidx.test.espresso.action.ViewActions.*
+import androidx.test.espresso.assertion.ViewAssertions.*
+import androidx.test.espresso.matcher.ViewMatchers.*
+import androidx.test.ext.junit.rules.ActivityScenarioRule
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import androidx.test.filters.LargeTest
+import org.hamcrest.Description
+import org.hamcrest.Matcher
+import org.hamcrest.Matchers.`is`
+import org.hamcrest.Matchers.allOf
+import org.hamcrest.TypeSafeMatcher
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+
+@LargeTest
+@RunWith(AndroidJUnit4::class)
+class EditMemberGymTest {
+
+    @Rule
+    @JvmField
+    var mActivityScenarioRule = ActivityScenarioRule(EditMemberGym::class.java)
+
+    @Test
+    fun editMemberGymTest() {
+        val materialButton = onView(
+            allOf(
+                withId(R.id.btn_save), withText("Simpan"),
+                childAtPosition(
+                    allOf(
+                        withId(R.id.ll_button),
+                        childAtPosition(
+                            withClassName(`is`("androidx.constraintlayout.widget.ConstraintLayout")),
+                            1
+                        )
+                    ),
+                    1
+                ),
+                isDisplayed()
+            )
+        )
+        materialButton.perform(click())
+        onView(isRoot()).perform(waitFor(3000))
+
+        val textInputEditText = onView(
+            allOf(
+                withId(R.id.et_personalTrainer),
+                childAtPosition(
+                    childAtPosition(
+                        withId(R.id.layout_personalTrainer),
+                        0
+                    ),
+                    0
+                )
+            )
+        )
+        textInputEditText.perform(scrollTo(), replaceText("Eric"), closeSoftKeyboard())
+
+        val materialButton2 = onView(
+            allOf(
+                withId(R.id.btn_save), withText("Simpan"),
+                childAtPosition(
+                    allOf(
+                        withId(R.id.ll_button),
+                        childAtPosition(
+                            withClassName(`is`("androidx.constraintlayout.widget.ConstraintLayout")),
+                            1
+                        )
+                    ),
+                    1
+                ),
+                isDisplayed()
+            )
+        )
+        materialButton2.perform(click())
+        onView(isRoot()).perform(waitFor(3000))
+
+        val textInputEditText2 = onView(
+            allOf(
+                withId(R.id.et_membership),
+                childAtPosition(
+                    childAtPosition(
+                        withId(R.id.layout_membership),
+                        0
+                    ),
+                    0
+                )
+            )
+        )
+        textInputEditText2.perform(scrollTo(), replaceText("Platinum"), closeSoftKeyboard())
+
+        val materialButton3 = onView(
+            allOf(
+                withId(R.id.btn_save), withText("Simpan"),
+                childAtPosition(
+                    allOf(
+                        withId(R.id.ll_button),
+                        childAtPosition(
+                            withClassName(`is`("androidx.constraintlayout.widget.ConstraintLayout")),
+                            1
+                        )
+                    ),
+                    1
+                ),
+                isDisplayed()
+            )
+        )
+        materialButton3.perform(click())
+        onView(isRoot()).perform(waitFor(3000))
+
+        val textInputEditText3 = onView(
+            allOf(
+                withId(R.id.et_tanggal),
+                childAtPosition(
+                    childAtPosition(
+                        withId(R.id.layout_tanggal),
+                        0
+                    ),
+                    0
+                )
+            )
+        )
+        textInputEditText3.perform(scrollTo(), replaceText("20-20-2020"), closeSoftKeyboard())
+
+        val materialButton4 = onView(
+            allOf(
+                withId(R.id.btn_save), withText("Simpan"),
+                childAtPosition(
+                    allOf(
+                        withId(R.id.ll_button),
+                        childAtPosition(
+                            withClassName(`is`("androidx.constraintlayout.widget.ConstraintLayout")),
+                            1
+                        )
+                    ),
+                    1
+                ),
+                isDisplayed()
+            )
+        )
+        materialButton4.perform(click())
+        onView(isRoot()).perform(waitFor(3000))
+
+        val textInputEditText4 = onView(
+            allOf(
+                withId(R.id.et_durasi),
+                childAtPosition(
+                    childAtPosition(
+                        withId(R.id.layout_durasi),
+                        0
+                    ),
+                    0
+                )
+            )
+        )
+        textInputEditText4.perform(scrollTo(), replaceText("1 Tahun"), closeSoftKeyboard())
+
+        val materialButton5 = onView(
+            allOf(
+                withId(R.id.btn_save), withText("Simpan"),
+                childAtPosition(
+                    allOf(
+                        withId(R.id.ll_button),
+                        childAtPosition(
+                            withClassName(`is`("androidx.constraintlayout.widget.ConstraintLayout")),
+                            1
+                        )
+                    ),
+                    1
+                ),
+                isDisplayed()
+            )
+        )
+        materialButton5.perform(click())
+        onView(isRoot()).perform(waitFor(3000))
+    }
+
+    private fun childAtPosition(
+        parentMatcher: Matcher<View>, position: Int
+    ): Matcher<View> {
+
+        return object : TypeSafeMatcher<View>() {
+            override fun describeTo(description: Description) {
+                description.appendText("Child at position $position in parent ")
+                parentMatcher.describeTo(description)
+            }
+
+            public override fun matchesSafely(view: View): Boolean {
+                val parent = view.parent
+                return parent is ViewGroup && parentMatcher.matches(parent)
+                        && view == parent.getChildAt(position)
+            }
+        }
+    }
+
+    fun waitFor(delay: Long): ViewAction? {
+        return object : ViewAction {
+            override fun getConstraints(): Matcher<View> {
+                return isRoot()
+            }
+
+            override fun getDescription(): String {
+                return "wait for " + delay + "milliseconds"
+            }
+
+            override fun perform(uiController: UiController, view: View) {
+                uiController.loopMainThreadForAtLeast(delay)
+            }
+        }
+    }
+}
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"LocalNotification\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        android:theme=\"@style/Theme.UGD1\">\r\n\r\n        <activity\r\n            android:name=\".MemberGymActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".EditMemberGym\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".EditProfileFragment\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SplashScreen\"\r\n            android:exported=\"true\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <service\r\n            android:name=\".MyFirebaseMessagingService\"\r\n            android:exported=\"false\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\r\n            </intent-filter>\r\n        </service>\r\n        <activity\r\n            android:name=\".HomeActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".RegisterActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"false\" />\r\n        <receiver android:name=\".NotificationReceiver\"/>\r\n        <activity\r\n            android:name=\".CameraActivity\"\r\n            android:exported=\"false\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	
+++ b/app/src/main/AndroidManifest.xml	
@@ -1,9 +1,23 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
 
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.CAMERA"/>
 
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission
+        android:name="android.permission.WRITE_EXTERNAL_STORAGE"
+        tools:ignore="ScopedStorage" />
+    <uses-permission
+        android:name="android.permission.MANAGE_EXTERNAL_STORAGE"
+        tools:ignore="ScopedStorage" />
+    <uses-permission android:name="android.permission.CAMERA" />
+
+    <uses-feature
+        android:name="android.hardware.camera"
+        android:required="false"/>
+
     <application
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
@@ -13,12 +27,15 @@
         android:usesCleartextTraffic="true"
         android:theme="@style/Theme.UGD1">
 
+        <activity
+            android:name=".QrScan"
+            android:exported="false" />
         <activity
             android:name=".MemberGymActivity"
             android:exported="false" />
         <activity
             android:name=".EditMemberGym"
-            android:exported="false" />
+            android:exported="true" />
         <activity
             android:name=".EditProfileFragment"
             android:exported="false" />
Index: app/src/main/java/com/example/ugd1/RegisterActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ugd1\r\n\r\nimport android.app.DatePickerDialog\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport android.content.Intent\r\nimport com.example.ugd1.databinding.ActivityRegisterBinding\r\n//import com.example.ugd1.room.User\r\nimport com.example.ugd1.model.UserModel\r\n//import com.example.ugd1.room.UserDB\r\nimport com.example.ugd1.api.UserApi\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.android.material.textfield.TextInputLayout\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.Color\r\nimport android.os.Build\r\nimport android.widget.Toast\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.app.NotificationManagerCompat\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.RequestQueue\r\nimport com.android.volley.Response\r\nimport com.android.volley.toolbox.StringRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.example.ugd1.databinding.ActivityMainBinding\r\nimport com.example.ugd1.room.User\r\nimport com.google.gson.Gson\r\nimport org.json.JSONObject\r\nimport java.nio.charset.StandardCharsets\r\n\r\nclass RegisterActivity: AppCompatActivity() {\r\n    private lateinit var tilUsername: TextInputLayout\r\n    private lateinit var tilPassword: TextInputLayout\r\n    private lateinit var tilEmail: TextInputLayout\r\n    private lateinit var tilTanggalLahir: TextInputLayout\r\n    private lateinit var tilNomorTelepon: TextInputLayout\r\n    private lateinit var btnRegister: Button\r\n    private lateinit var btnClear: Button\r\n    private lateinit var registerLayout: ConstraintLayout\r\n    private lateinit var btnDatePicker: Button\r\n    private val CHANNEL_ID_1 = \"channel_notification_01\"\r\n    private val CHANNEL_ID_2 = \"channel_notification_02\"\r\n    private val notificationId1 = 101\r\n    private var queue: RequestQueue? = null\r\n\r\n    private lateinit var binding: ActivityRegisterBinding\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_register)\r\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        queue = Volley.newRequestQueue(this)\r\n\r\n        setContentView(view)\r\n\r\n//        val db by lazy{ UserDB( this) }\r\n//        val userDao = db.userDao()\r\n\r\n        tilUsername = findViewById(R.id.etUsername)\r\n        tilPassword = findViewById(R.id.etPassword)\r\n        tilEmail = findViewById(R.id.etEmail)\r\n        tilTanggalLahir = findViewById(R.id.etTanggalLahir)\r\n        tilNomorTelepon = findViewById(R.id.etNomorTelepon)\r\n        val btnRegister: Button = findViewById(R.id.btnRegister)\r\n        val btnClear: Button = findViewById(R.id.btnClear)\r\n        var checkLogin = true\r\n\r\n        binding.btnRegister.setOnClickListener(View.OnClickListener {\r\n            val mBundle = Bundle()\r\n            val intent = Intent(this, MainActivity::class.java)\r\n\r\n            val username: String = binding.etUsername.getEditText()?.getText().toString()\r\n            val password: String = binding.etPassword.getEditText()?.getText().toString()\r\n            val email: String = binding.etEmail.getEditText()?.getText().toString()\r\n            val tanggalLahir: String = binding.etTanggalLahir.getEditText()?.getText().toString()\r\n            val nomorTelepon: String = binding.etNomorTelepon.getEditText()?.getText().toString()\r\n\r\n            if(username.isEmpty()){\r\n                binding.etUsername.setError(\"Username masih Kosong\")\r\n                checkLogin = false\r\n            }\r\n\r\n            if(password.isEmpty()){\r\n                binding.etPassword.setError(\"Password masih Kosong\")\r\n                checkLogin = false\r\n            }\r\n\r\n            if(email.isEmpty()) {\r\n                binding.etEmail.setError(\"Email masih Kosong\")\r\n                checkLogin = false\r\n            }\r\n\r\n            if(tanggalLahir.isEmpty()){\r\n                binding.etTanggalLahir.setError(\"Tanggal Lahir masih Kosong\")\r\n                checkLogin = false\r\n            }\r\n\r\n            if(nomorTelepon.isEmpty()){\r\n                binding.etNomorTelepon.setError(\"Nomor Telepon masih Kosong\")\r\n                checkLogin = false\r\n            }\r\n\r\n            if(!username.isEmpty() && !password.isEmpty() && !email.isEmpty() && !tanggalLahir.isEmpty() && !nomorTelepon.isEmpty()){\r\n                checkLogin = true\r\n            }\r\n\r\n            if(binding.etUsername.getEditText()?.getText()==null){\r\n                binding.etUsername.getEditText()?.setText(\"\")\r\n            }\r\n\r\n            if(binding.etPassword.getEditText()?.getText()==null){\r\n                binding.etPassword.getEditText()?.setText(\"\")\r\n            }\r\n\r\n            if(checkLogin == true){\r\n                createUser(mBundle)\r\n//                val moveRegister = Intent(this@RegisterActivity, MainActivity::class.java)\r\n//                mBundle.putString(\"username\", binding.etUsername.editText?.text.toString())\r\n//                mBundle.putString(\"password\", binding.etPassword.editText?.text.toString())\r\n//                mBundle.putString(\"email\", binding.etEmail.editText?.text.toString())\r\n//                mBundle.putString(\"TanggalLahir\", binding.etTanggalLahir.editText?.text.toString())\r\n//                mBundle.putString(\"NomorTelepon\", binding.etNomorTelepon.editText?.text.toString())\r\n//\r\n//                createNotificationChannel()\r\n//\r\n//                sendNotification1()\r\n//\r\n//                moveRegister.putExtra(\"register\", mBundle)\r\n//                startActivity(moveRegister)\r\n            }\r\n            if(!checkLogin) return@OnClickListener\r\n\r\n//            val user = User(0, username, password, email, tanggalLahir, nomorTelepon)\r\n//            userDao.addUser(user)\r\n        })\r\n\r\n        btnDatePicker = findViewById(R.id.btnDatePicker)\r\n        val myCalendar = Calendar.getInstance()\r\n        val datePicker = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->\r\n            myCalendar.set(Calendar.YEAR, year)\r\n            myCalendar.set(Calendar.MONTH, month)\r\n            myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth)\r\n            updateLable(myCalendar)\r\n        }\r\n\r\n        btnDatePicker.setOnClickListener{\r\n            DatePickerDialog(this, datePicker, myCalendar.get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),\r\n                myCalendar.get(Calendar.DAY_OF_MONTH)).show()\r\n        }\r\n\r\n        btnClear.setOnClickListener{\r\n            binding.etUsername.editText?.setText(\"\")\r\n            binding.etPassword.editText?.setText(\"\")\r\n            binding.etEmail.editText?.setText(\"\")\r\n            binding.etTanggalLahir.editText?.setText(\"\")\r\n            binding.etNomorTelepon.editText?.setText(\"\")\r\n\r\n        }\r\n    }\r\n\r\n    private fun createNotificationChannel() {\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val name = \"Notification Title\"\r\n            val descriptionText = \"Notification Description\"\r\n\r\n            val channel1 = NotificationChannel(CHANNEL_ID_1, name, NotificationManager.IMPORTANCE_DEFAULT).apply {\r\n                description = descriptionText\r\n            }\r\n\r\n\r\n            val notificationManager: NotificationManager =\r\n                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n            notificationManager.createNotificationChannel(channel1)\r\n        }\r\n    }\r\n\r\n    private fun sendNotification1() {\r\n        val intent : Intent = Intent(this, MainActivity::class.java).apply {\r\n            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n        }\r\n\r\n        val pendingIntent: PendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\r\n        val broadcastIntent : Intent = Intent(this, NotificationReceiver::class.java)\r\n        broadcastIntent.putExtra(\"toastMessage\", \"Register Succesful, Happy Gym \"+binding?.inputUsername?.text.toString())\r\n        val actionIntent = PendingIntent.getBroadcast(this, 0, broadcastIntent, PendingIntent.FLAG_UPDATE_CURRENT)\r\n        val logo = BitmapFactory.decodeResource(resources, R.drawable.gym)\r\n        val builder = NotificationCompat.Builder(this, CHANNEL_ID_1)\r\n            .setSmallIcon(R.drawable.gym)\r\n            .setContentTitle(\"Register Succesful !!\")\r\n            .setContentText(\"Registered as \"+binding?.inputUsername?.text.toString())\r\n            .setCategory(NotificationCompat.CATEGORY_MESSAGE)\r\n            .setColor(Color.BLUE)\r\n            .setLargeIcon(logo)\r\n            .setStyle(\r\n                NotificationCompat.BigPictureStyle()\r\n                    .bigLargeIcon(null)\r\n                    .bigPicture(logo)\r\n            )\r\n            .setAutoCancel(true)\r\n            .setOnlyAlertOnce(true)\r\n            .setContentIntent(pendingIntent)\r\n            .addAction(R.mipmap.ic_launcher, \"Welcome\", actionIntent)\r\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\r\n\r\n        with(NotificationManagerCompat.from(this)) {\r\n            notify(notificationId1, builder.build())\r\n        }\r\n    }\r\n\r\n\r\n    private fun updateLable(myCalendar: Calendar) {\r\n        val myFormat = \"dd-MM-yyyy\"\r\n        val sdf = SimpleDateFormat(myFormat, Locale.UK)\r\n        binding.etTanggalLahir.editText?.setText(sdf.format(myCalendar.time))\r\n    }\r\n\r\n    private fun createUser(mBundle: Bundle){\r\n//        setLoading(true)\r\n\r\n        val user = UserModel(0,\r\n            binding.etUsername.getEditText()?.getText().toString(),\r\n            binding.etPassword.getEditText()?.getText().toString(),\r\n            binding.etEmail.getEditText()?.getText().toString(),\r\n            binding.etTanggalLahir.getEditText()?.getText().toString(),\r\n            binding.etNomorTelepon.getEditText()?.getText().toString()\r\n        )\r\n        val stringRequest: StringRequest = object: StringRequest(Method.POST, UserApi.ADD_URL, Response.Listener { response->\r\n                val gson = Gson()\r\n                val mahasiswa = gson.fromJson(response, UserModel::class.java)\r\n                val moveRegister = Intent(this@RegisterActivity, MainActivity::class.java)\r\n\r\n                if(mahasiswa!=null){\r\n                    Toast.makeText(this@RegisterActivity, \"Data Berhasil Ditambahkan\", Toast.LENGTH_SHORT).show()\r\n                }else {\r\n                    Toast.makeText(this@RegisterActivity, \"Data kosong\", Toast.LENGTH_SHORT).show()\r\n                }\r\n\r\n\r\n//                val returnIntent = Intent()\r\n//                setResult(RESULT_OK, returnIntent)\r\n//                finish()\r\n                mBundle.putString(\"username\", binding.etUsername.editText?.text.toString())\r\n                mBundle.putString(\"password\", binding.etPassword.editText?.text.toString())\r\n                mBundle.putString(\"email\", binding.etEmail.editText?.text.toString())\r\n                mBundle.putString(\"TanggalLahir\", binding.etTanggalLahir.editText?.text.toString())\r\n                mBundle.putString(\"NomorTelepon\", binding.etNomorTelepon.editText?.text.toString())\r\n\r\n                createNotificationChannel()\r\n\r\n                sendNotification1()\r\n\r\n                moveRegister.putExtra(\"register\", mBundle)\r\n                startActivity(moveRegister)\r\n\r\n//                setLoading(false)\r\n            }, Response.ErrorListener { error->\r\n//                setLoading(false)\r\n                try{\r\n                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)\r\n                    val errors = JSONObject(responseBody)\r\n                    Toast.makeText(\r\n                        this@RegisterActivity,\r\n                        errors.getString(\"message\"),\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }catch (e:Exception){\r\n                    Toast.makeText(this@RegisterActivity, e.message, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }) {\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): MutableMap<String, String> {\r\n                    val headers = HashMap<String, String>()\r\n                    headers[\"Accept\"] = \"application/json\"\r\n                    return headers\r\n\r\n                }\r\n\r\n                @Throws(AuthFailureError::class)\r\n                override fun getBody(): ByteArray {\r\n                    val gson = Gson()\r\n                    val requestBody = gson.toJson(user)\r\n                    return requestBody.toByteArray(StandardCharsets.UTF_8)\r\n                }\r\n\r\n                override fun getBodyContentType(): String {\r\n                    return \"application/json\"\r\n                }\r\n            }\r\n        // Menambahkan request ke request queue\r\n        queue!!.add(stringRequest)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/RegisterActivity.kt b/app/src/main/java/com/example/ugd1/RegisterActivity.kt
--- a/app/src/main/java/com/example/ugd1/RegisterActivity.kt	
+++ b/app/src/main/java/com/example/ugd1/RegisterActivity.kt	
@@ -1,5 +1,46 @@
 package com.example.ugd1
 
+//import android.app.DatePickerDialog
+//import android.os.Bundle
+//import android.view.View
+//import android.widget.Button
+//import androidx.appcompat.app.AppCompatActivity
+//import androidx.constraintlayout.widget.ConstraintLayout
+//import android.content.Intent
+//import com.example.ugd1.databinding.ActivityRegisterBinding
+////import com.example.ugd1.room.User
+//import com.example.ugd1.model.UserModel
+////import com.example.ugd1.room.UserDB
+//import com.example.ugd1.api.UserApi
+//import com.google.android.material.snackbar.Snackbar
+//import com.google.android.material.textfield.TextInputLayout
+//import kotlinx.coroutines.CoroutineScope
+//import kotlinx.coroutines.Dispatchers
+//import kotlinx.coroutines.launch
+//import java.text.SimpleDateFormat
+//import java.util.*
+//import android.app.NotificationChannel
+//import android.app.NotificationManager
+//import android.app.PendingIntent
+//import android.content.Context
+//import android.graphics.BitmapFactory
+//import android.graphics.Color
+//import android.os.Build
+//import android.widget.Toast
+//import androidx.core.app.NotificationCompat
+//import androidx.core.app.NotificationManagerCompat
+//import com.android.volley.AuthFailureError
+//import com.android.volley.RequestQueue
+//import com.android.volley.Response
+//import com.android.volley.toolbox.StringRequest
+//import com.android.volley.toolbox.Volley
+//import com.example.ugd1.databinding.ActivityMainBinding
+//import com.example.ugd1.room.User
+//import com.google.gson.Gson
+//import org.json.JSONObject
+//import java.nio.charset.StandardCharsets
+
+import android.annotation.SuppressLint
 import android.app.DatePickerDialog
 import android.os.Bundle
 import android.view.View
@@ -23,10 +64,14 @@
 import android.app.NotificationManager
 import android.app.PendingIntent
 import android.content.Context
+import android.graphics.Bitmap
 import android.graphics.BitmapFactory
 import android.graphics.Color
+import android.graphics.drawable.BitmapDrawable
 import android.os.Build
+import android.os.Environment
 import android.widget.Toast
+import androidx.annotation.RequiresApi
 import androidx.core.app.NotificationCompat
 import androidx.core.app.NotificationManagerCompat
 import com.android.volley.AuthFailureError
@@ -37,8 +82,28 @@
 import com.example.ugd1.databinding.ActivityMainBinding
 import com.example.ugd1.room.User
 import com.google.gson.Gson
+import com.itextpdf.barcodes.BarcodeQRCode
+import com.itextpdf.io.image.ImageDataFactory
+import com.itextpdf.io.source.ByteArrayOutputStream
+import com.itextpdf.kernel.colors.ColorConstants
+import com.itextpdf.kernel.geom.PageSize
+import com.itextpdf.kernel.pdf.PdfDocument
+import com.itextpdf.kernel.pdf.PdfWriter
+import com.itextpdf.layout.Document
+import com.itextpdf.layout.element.Cell
+import com.itextpdf.layout.element.Image
+import com.itextpdf.layout.element.Paragraph
+import com.itextpdf.layout.element.Table
+import com.itextpdf.layout.property.HorizontalAlignment
+import com.itextpdf.layout.property.TextAlignment
 import org.json.JSONObject
+import java.io.File
+import java.io.FileNotFoundException
+import java.io.FileOutputStream
 import java.nio.charset.StandardCharsets
+import java.time.LocalDate
+import java.time.LocalTime
+import java.time.format.DateTimeFormatter
 
 class RegisterActivity: AppCompatActivity() {
     private lateinit var tilUsername: TextInputLayout
@@ -129,6 +194,7 @@
 
             if(checkLogin == true){
                 createUser(mBundle)
+
 //                val moveRegister = Intent(this@RegisterActivity, MainActivity::class.java)
 //                mBundle.putString("username", binding.etUsername.editText?.text.toString())
 //                mBundle.putString("password", binding.etPassword.editText?.text.toString())
@@ -304,4 +370,6 @@
         // Menambahkan request ke request queue
         queue!!.add(stringRequest)
     }
+
+
 }
\ No newline at end of file
Index: app/src/main/java/com/example/ugd1/EditMemberGym.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ugd1\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.Color\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.*\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.app.NotificationManagerCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.RequestQueue\r\nimport com.android.volley.Response\r\nimport com.android.volley.toolbox.StringRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.example.ugd1.api.MemberGymApi\r\nimport com.example.ugd1.model.MemberGymModel\r\nimport com.example.ugd1.room.*\r\nimport com.google.gson.Gson\r\nimport kotlinx.android.synthetic.main.activity_edit_member_gym.*\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport org.json.JSONObject\r\nimport java.nio.charset.StandardCharsets\r\n\r\nclass EditMemberGym : AppCompatActivity() {\r\n\r\n    private var etId: EditText? = null\r\n    private var etPersonalTrainer: EditText? = null\r\n    private var etMembership: EditText? = null\r\n    private var edTanggal: EditText? = null\r\n    private var edDurasi: EditText? = null\r\n    private var layoutLoading: LinearLayout? = null\r\n    private var queue: RequestQueue? = null\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_edit_member_gym)\r\n\r\n        //Pendeklarasian request queue\r\n        queue = Volley.newRequestQueue(this)\r\n        etId = findViewById(R.id.et_id)\r\n        etPersonalTrainer = findViewById(R.id.et_personalTrainer)\r\n        etMembership = findViewById(R.id.et_membership)\r\n        edTanggal = findViewById(R.id.et_tanggal)\r\n        edDurasi = findViewById(R.id.et_durasi)\r\n        layoutLoading = findViewById(R.id.layout_loading)\r\n//\r\n//        setExposedDropDownMenu()\r\n\r\n        val btnCancel = findViewById<Button>(R.id.btn_cancel)\r\n        btnCancel.setOnClickListener{finish() }\r\n        val btnSave = findViewById<Button>(R.id.btn_save)\r\n        val tvTitle =findViewById<TextView>(R.id.tv_title)\r\n        val id = intent.getIntExtra(\"id\", -1)\r\n        if(id== -1){\r\n            tvTitle.setText(\"Tambah Member Gym\")\r\n            btnSave.setOnClickListener { createMahasiswa() }\r\n        }else{\r\n            tvTitle.setText(\"Edit Member Gym\")\r\n            getMahasiswaById(id)\r\n\r\n            btnSave.setOnClickListener { updateMahasiswa(id) }\r\n        }\r\n\r\n    }\r\n\r\n//    fun setExposedDropDownMenu(){\r\n//        val adapterFakultas: ArrayAdapter<String> = ArrayAdapter<String>(this,\r\n//            R.layout.item_list, FAKULTAS_LIST)\r\n//        edFakultas!!.setAdapter(adapterFakultas)\r\n//\r\n//        val adapterProdi: ArrayAdapter<String> = ArrayAdapter<String>(this,\r\n//            R.layout.item_list, PRODI_LIST)\r\n//        edProdi!!.setAdapter(adapterProdi)\r\n//    }\r\n\r\n    private fun getMahasiswaById(id: Int){\r\n        // Fungsi untuk menampilkan data mahasiswa berdasarkan id\r\n        setLoading(true)\r\n        val stringRequest: StringRequest =\r\n            object : StringRequest(Method.GET, MemberGymApi.GET_BY_ID_URL + id, Response.Listener { response ->\r\n//                val gson = Gson()\r\n//                val member = gson.fromJson(response, MemberGym::class.java)\r\n\r\n                var memberJo = JSONObject(response.toString())\r\n                val member = memberJo.getJSONObject(\"data\")\r\n\r\n                etPersonalTrainer!!.setText(member.getString(\"personalTrainer\"))\r\n                etMembership!!.setText(member.getString(\"membership\"))\r\n                edTanggal!!.setText(member.getString(\"tanggal\"))\r\n                edDurasi!!.setText(member.getString(\"durasi\"))\r\n\r\n                Toast.makeText(this@EditMemberGym, \"Data berhasil diambil\", Toast.LENGTH_SHORT).show()\r\n                setLoading(false)\r\n            },  Response.ErrorListener { error ->\r\n                setLoading(false)\r\n                try{\r\n                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)\r\n                    val errors = JSONObject(responseBody)\r\n                    Toast.makeText(\r\n                        this@EditMemberGym,\r\n                        errors.getString(\"message\"),\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }catch (e: Exception){\r\n                    Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }){\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): MutableMap<String, String> {\r\n                    val headers = HashMap<String, String>()\r\n                    headers[\"Accept\"] = \"application/json\"\r\n                    return headers\r\n                }\r\n            }\r\n        queue!!.add(stringRequest)\r\n    }\r\n\r\n    private fun createMahasiswa(){\r\n        setLoading(true)\r\n\r\n        val member = MemberGymModel(\r\n            0,\r\n            etPersonalTrainer!!.text.toString(),\r\n            etMembership!!.text.toString(),\r\n            edTanggal!!.text.toString(),\r\n            edDurasi!!.text.toString()\r\n        )\r\n        val stringRequest: StringRequest =\r\n            object: StringRequest(Method.POST, MemberGymApi.ADD_URL, Response.Listener { response->\r\n                val gson = Gson()\r\n                val mahasiswa = gson.fromJson(response, MemberGym::class.java)\r\n\r\n                if(mahasiswa!=null)\r\n                    Toast.makeText(this@EditMemberGym, \"Data Berhasil Ditambahkan\", Toast.LENGTH_SHORT).show()\r\n\r\n                val returnIntent = Intent()\r\n                setResult(RESULT_OK, returnIntent)\r\n                finish()\r\n\r\n                setLoading(false)\r\n            }, Response.ErrorListener { error->\r\n                setLoading(false)\r\n                try{\r\n                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)\r\n                    val errors = JSONObject(responseBody)\r\n                    Toast.makeText(\r\n                        this@EditMemberGym,\r\n                        errors.getString(\"message\"),\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }catch (e:Exception){\r\n                    Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }) {\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): MutableMap<String, String> {\r\n                    val headers = HashMap<String, String>()\r\n                    headers[\"Accept\"] = \"application/json\"\r\n                    return headers\r\n\r\n                }\r\n\r\n                @Throws(AuthFailureError::class)\r\n                override fun getBody(): ByteArray {\r\n                    val gson = Gson()\r\n                    val requestBody = gson.toJson(member)\r\n                    return requestBody.toByteArray(StandardCharsets.UTF_8)\r\n                }\r\n\r\n                override fun getBodyContentType(): String {\r\n                    return \"application/json\"\r\n                }\r\n            }\r\n        // Menambahkan request ke request queue\r\n        queue!!.add(stringRequest)\r\n    }\r\n\r\n    private fun updateMahasiswa(id: Int){\r\n        setLoading(true)\r\n\r\n        val member = MemberGymModel(\r\n            id,\r\n            etPersonalTrainer!!.text.toString(),\r\n            etMembership!!.text.toString(),\r\n            edTanggal!!.text.toString(),\r\n            edDurasi!!.text.toString()\r\n        )\r\n\r\n        val stringRequest: StringRequest = object :\r\n            StringRequest(Method.PUT, MemberGymApi.UPDATE_URL + id, Response.Listener{ response ->\r\n                val gson = Gson()\r\n\r\n                val mahasiswa = gson.fromJson(response, MemberGymModel::class.java)\r\n\r\n                if(mahasiswa != null)\r\n                    Toast.makeText(this@EditMemberGym, \"Data Berhasil Diupdate\", Toast.LENGTH_SHORT).show()\r\n                val returnIntent = Intent()\r\n                setResult(RESULT_OK, returnIntent)\r\n                finish()\r\n\r\n                setLoading(false)\r\n            }, Response.ErrorListener{ error->\r\n                setLoading(false)\r\n                try{\r\n                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)\r\n                    val errors = JSONObject(responseBody)\r\n                    Toast.makeText(\r\n                        this@EditMemberGym,\r\n                        errors.getString(\"message\"),\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }catch (e:Exception){\r\n                    Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }){\r\n            @Throws(AuthFailureError::class)\r\n            override fun getHeaders(): Map<String, String> {\r\n                val headers = HashMap<String, String>()\r\n                headers[\"Accept\"] = \"application/json\"\r\n                return headers\r\n\r\n            }\r\n\r\n            @Throws(AuthFailureError::class)\r\n            override fun getBody(): ByteArray {\r\n                val gson = Gson()\r\n                val requestBody = gson.toJson(member)\r\n                return requestBody.toByteArray(StandardCharsets.UTF_8)\r\n            }\r\n\r\n            override fun getBodyContentType(): String {\r\n                return \"application/json\"\r\n            }\r\n        }\r\n        queue!!.add(stringRequest)\r\n\r\n    }\r\n\r\n    //Fungsi ini digunakan untuk menampilkan layout Loading\r\n\r\n    private fun setLoading(isLoading: Boolean){\r\n        if(isLoading){\r\n            window.setFlags(\r\n                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,\r\n                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\r\n            )\r\n            layoutLoading!!.visibility = View.VISIBLE\r\n        }else{\r\n            window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)\r\n            layoutLoading!!.visibility = View.INVISIBLE\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/EditMemberGym.kt b/app/src/main/java/com/example/ugd1/EditMemberGym.kt
--- a/app/src/main/java/com/example/ugd1/EditMemberGym.kt	
+++ b/app/src/main/java/com/example/ugd1/EditMemberGym.kt	
@@ -1,18 +1,23 @@
 package com.example.ugd1
 
+import android.annotation.SuppressLint
 import android.app.NotificationChannel
 import android.app.NotificationManager
 import android.app.PendingIntent
 import android.content.Context
 import android.content.Intent
+import android.graphics.Bitmap
 import android.graphics.BitmapFactory
 import android.graphics.Color
+import android.graphics.drawable.BitmapDrawable
 import android.os.Build
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
+import android.os.Environment
 import android.view.View
 import android.view.WindowManager
 import android.widget.*
+import androidx.annotation.RequiresApi
 import androidx.core.app.NotificationCompat
 import androidx.core.app.NotificationManagerCompat
 import androidx.core.content.ContextCompat
@@ -25,12 +30,33 @@
 import com.example.ugd1.model.MemberGymModel
 import com.example.ugd1.room.*
 import com.google.gson.Gson
+import com.itextpdf.barcodes.BarcodeQRCode
+import com.itextpdf.io.image.ImageDataFactory
+import com.itextpdf.io.source.ByteArrayOutputStream
+import com.itextpdf.kernel.colors.ColorConstants
+import com.itextpdf.kernel.geom.PageSize
+import com.itextpdf.kernel.pdf.PdfDocument
+import com.itextpdf.kernel.pdf.PdfWriter
+import com.itextpdf.layout.Document
+import com.itextpdf.layout.element.Cell
+import com.itextpdf.layout.element.Image
+import com.itextpdf.layout.element.Paragraph
+import com.itextpdf.layout.element.Table
+import com.itextpdf.layout.property.HorizontalAlignment
+import com.itextpdf.layout.property.TextAlignment
 import kotlinx.android.synthetic.main.activity_edit_member_gym.*
+import kotlinx.android.synthetic.main.activity_register.*
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
 import org.json.JSONObject
+import java.io.File
+import java.io.FileNotFoundException
+import java.io.FileOutputStream
 import java.nio.charset.StandardCharsets
+import java.time.LocalDate
+import java.time.LocalTime
+import java.time.format.DateTimeFormatter
 
 class EditMemberGym : AppCompatActivity() {
 
@@ -43,7 +69,6 @@
     private var queue: RequestQueue? = null
 
 
-
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_edit_member_gym)
@@ -60,14 +85,25 @@
 //        setExposedDropDownMenu()
 
         val btnCancel = findViewById<Button>(R.id.btn_cancel)
-        btnCancel.setOnClickListener{finish() }
+        btnCancel.setOnClickListener { finish() }
         val btnSave = findViewById<Button>(R.id.btn_save)
-        val tvTitle =findViewById<TextView>(R.id.tv_title)
+        val tvTitle = findViewById<TextView>(R.id.tv_title)
         val id = intent.getIntExtra("id", -1)
-        if(id== -1){
-            tvTitle.setText("Tambah Member Gym")
-            btnSave.setOnClickListener { createMahasiswa() }
-        }else{
+        if (id == -1) {
+            btnSave.setOnClickListener {
+                val personalTrainer = etPersonalTrainer!!.text.toString()
+                val membership = etMembership!!.text.toString()
+                val tanggal = edTanggal!!.text.toString()
+                val durasi = edDurasi!!.text.toString()
+
+                tvTitle.setText("Tambah Member Gym")
+
+                createMahasiswa()
+//                createPdf(personalTrainer, membership, tanggal, durasi)
+            }
+
+
+        } else {
             tvTitle.setText("Edit Member Gym")
             getMahasiswaById(id)
 
@@ -86,38 +122,44 @@
 //        edProdi!!.setAdapter(adapterProdi)
 //    }
 
-    private fun getMahasiswaById(id: Int){
+    private fun getMahasiswaById(id: Int) {
         // Fungsi untuk menampilkan data mahasiswa berdasarkan id
         setLoading(true)
         val stringRequest: StringRequest =
-            object : StringRequest(Method.GET, MemberGymApi.GET_BY_ID_URL + id, Response.Listener { response ->
+            object : StringRequest(
+                Method.GET,
+                MemberGymApi.GET_BY_ID_URL + id,
+                Response.Listener { response ->
 //                val gson = Gson()
 //                val member = gson.fromJson(response, MemberGym::class.java)
 
-                var memberJo = JSONObject(response.toString())
-                val member = memberJo.getJSONObject("data")
+                    var memberJo = JSONObject(response.toString())
+                    val member = memberJo.getJSONObject("data")
 
-                etPersonalTrainer!!.setText(member.getString("personalTrainer"))
-                etMembership!!.setText(member.getString("membership"))
-                edTanggal!!.setText(member.getString("tanggal"))
-                edDurasi!!.setText(member.getString("durasi"))
+                    etPersonalTrainer!!.setText(member.getString("personalTrainer"))
+                    etMembership!!.setText(member.getString("membership"))
+                    edTanggal!!.setText(member.getString("tanggal"))
+                    edDurasi!!.setText(member.getString("durasi"))
 
-                Toast.makeText(this@EditMemberGym, "Data berhasil diambil", Toast.LENGTH_SHORT).show()
-                setLoading(false)
-            },  Response.ErrorListener { error ->
-                setLoading(false)
-                try{
-                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)
-                    val errors = JSONObject(responseBody)
-                    Toast.makeText(
-                        this@EditMemberGym,
-                        errors.getString("message"),
-                        Toast.LENGTH_SHORT
-                    ).show()
-                }catch (e: Exception){
-                    Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()
-                }
-            }){
+                    Toast.makeText(this@EditMemberGym, "Data berhasil diambil", Toast.LENGTH_SHORT)
+                        .show()
+                    setLoading(false)
+                },
+                Response.ErrorListener { error ->
+                    setLoading(false)
+                    try {
+                        val responseBody =
+                            String(error.networkResponse.data, StandardCharsets.UTF_8)
+                        val errors = JSONObject(responseBody)
+                        Toast.makeText(
+                            this@EditMemberGym,
+                            errors.getString("message"),
+                            Toast.LENGTH_SHORT
+                        ).show()
+                    } catch (e: Exception) {
+                        Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()
+                    }
+                }) {
                 @Throws(AuthFailureError::class)
                 override fun getHeaders(): MutableMap<String, String> {
                     val headers = HashMap<String, String>()
@@ -128,139 +170,261 @@
         queue!!.add(stringRequest)
     }
 
-    private fun createMahasiswa(){
+    private fun createMahasiswa() {
         setLoading(true)
 
-        val member = MemberGymModel(
-            0,
-            etPersonalTrainer!!.text.toString(),
-            etMembership!!.text.toString(),
-            edTanggal!!.text.toString(),
-            edDurasi!!.text.toString()
-        )
-        val stringRequest: StringRequest =
-            object: StringRequest(Method.POST, MemberGymApi.ADD_URL, Response.Listener { response->
-                val gson = Gson()
-                val mahasiswa = gson.fromJson(response, MemberGym::class.java)
+        if (etPersonalTrainer!!.text.toString().isEmpty()) {
+            Toast.makeText(
+                this@EditMemberGym,
+                "Personal Trainer tidak boleh kosong!",
+                Toast.LENGTH_SHORT
+            ).show()
+        } else if (etMembership!!.text.toString().isEmpty()) {
+            Toast.makeText(this@EditMemberGym, "Membership tidak boleh kosong!", Toast.LENGTH_SHORT)
+                .show()
+        } else if (edTanggal!!.text.toString().isEmpty()) {
+            Toast.makeText(this@EditMemberGym, "Tanggal tidak boleh kosong!", Toast.LENGTH_SHORT)
+                .show()
+        } else if (edDurasi!!.text.toString().isEmpty()) {
+            Toast.makeText(this@EditMemberGym, "Durasi tidak boleh kosong!", Toast.LENGTH_SHORT)
+                .show()
+        } else {
+
+            val member = MemberGymModel(
+                0,
+                etPersonalTrainer!!.text.toString(),
+                etMembership!!.text.toString(),
+                edTanggal!!.text.toString(),
+                edDurasi!!.text.toString()
+            )
+            val stringRequest: StringRequest =
+                object :
+                    StringRequest(Method.POST, MemberGymApi.ADD_URL, Response.Listener { response ->
+                        val gson = Gson()
+                        val mahasiswa = gson.fromJson(response, MemberGym::class.java)
 
-                if(mahasiswa!=null)
-                    Toast.makeText(this@EditMemberGym, "Data Berhasil Ditambahkan", Toast.LENGTH_SHORT).show()
+                        if (mahasiswa != null)
+                            Toast.makeText(
+                                this@EditMemberGym,
+                                "Data Berhasil Ditambahkan",
+                                Toast.LENGTH_SHORT
+                            ).show()
 
-                val returnIntent = Intent()
-                setResult(RESULT_OK, returnIntent)
-                finish()
+                        val returnIntent = Intent()
+                        setResult(RESULT_OK, returnIntent)
+                        finish()
 
-                setLoading(false)
-            }, Response.ErrorListener { error->
-                setLoading(false)
-                try{
-                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)
-                    val errors = JSONObject(responseBody)
-                    Toast.makeText(
-                        this@EditMemberGym,
-                        errors.getString("message"),
-                        Toast.LENGTH_SHORT
-                    ).show()
-                }catch (e:Exception){
-                    Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()
-                }
-            }) {
-                @Throws(AuthFailureError::class)
-                override fun getHeaders(): MutableMap<String, String> {
-                    val headers = HashMap<String, String>()
-                    headers["Accept"] = "application/json"
-                    return headers
+                        setLoading(false)
+                    }, Response.ErrorListener { error ->
+                        setLoading(false)
+                        try {
+                            val responseBody =
+                                String(error.networkResponse.data, StandardCharsets.UTF_8)
+                            val errors = JSONObject(responseBody)
+                            Toast.makeText(
+                                this@EditMemberGym,
+                                errors.getString("message"),
+                                Toast.LENGTH_SHORT
+                            ).show()
+                        } catch (e: Exception) {
+                            Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()
+                        }
+                    }) {
+                    @Throws(AuthFailureError::class)
+                    override fun getHeaders(): MutableMap<String, String> {
+                        val headers = HashMap<String, String>()
+                        headers["Accept"] = "application/json"
+                        return headers
 
-                }
+                    }
 
-                @Throws(AuthFailureError::class)
-                override fun getBody(): ByteArray {
-                    val gson = Gson()
-                    val requestBody = gson.toJson(member)
-                    return requestBody.toByteArray(StandardCharsets.UTF_8)
-                }
+                    @Throws(AuthFailureError::class)
+                    override fun getBody(): ByteArray {
+                        val gson = Gson()
+                        val requestBody = gson.toJson(member)
+                        return requestBody.toByteArray(StandardCharsets.UTF_8)
+                    }
 
-                override fun getBodyContentType(): String {
-                    return "application/json"
-                }
-            }
-        // Menambahkan request ke request queue
-        queue!!.add(stringRequest)
+                    override fun getBodyContentType(): String {
+                        return "application/json"
+                    }
+                }
+            // Menambahkan request ke request queue
+            queue!!.add(stringRequest)
+        }
+        setLoading(false)
     }
 
-    private fun updateMahasiswa(id: Int){
-        setLoading(true)
+        private fun updateMahasiswa(id: Int) {
+            setLoading(true)
 
-        val member = MemberGymModel(
-            id,
-            etPersonalTrainer!!.text.toString(),
-            etMembership!!.text.toString(),
-            edTanggal!!.text.toString(),
-            edDurasi!!.text.toString()
-        )
+            val member = MemberGymModel(
+                id,
+                etPersonalTrainer!!.text.toString(),
+                etMembership!!.text.toString(),
+                edTanggal!!.text.toString(),
+                edDurasi!!.text.toString()
+            )
 
-        val stringRequest: StringRequest = object :
-            StringRequest(Method.PUT, MemberGymApi.UPDATE_URL + id, Response.Listener{ response ->
-                val gson = Gson()
+            val stringRequest: StringRequest = object :
+                StringRequest(
+                    Method.PUT,
+                    MemberGymApi.UPDATE_URL + id,
+                    Response.Listener { response ->
+                        val gson = Gson()
 
-                val mahasiswa = gson.fromJson(response, MemberGymModel::class.java)
+                        val mahasiswa = gson.fromJson(response, MemberGymModel::class.java)
 
-                if(mahasiswa != null)
-                    Toast.makeText(this@EditMemberGym, "Data Berhasil Diupdate", Toast.LENGTH_SHORT).show()
-                val returnIntent = Intent()
-                setResult(RESULT_OK, returnIntent)
-                finish()
+                        if (mahasiswa != null)
+                            Toast.makeText(
+                                this@EditMemberGym,
+                                "Data Berhasil Diupdate",
+                                Toast.LENGTH_SHORT
+                            ).show()
+                        val returnIntent = Intent()
+                        setResult(RESULT_OK, returnIntent)
+                        finish()
 
-                setLoading(false)
-            }, Response.ErrorListener{ error->
-                setLoading(false)
-                try{
-                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)
-                    val errors = JSONObject(responseBody)
-                    Toast.makeText(
-                        this@EditMemberGym,
-                        errors.getString("message"),
-                        Toast.LENGTH_SHORT
-                    ).show()
-                }catch (e:Exception){
-                    Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()
-                }
-            }){
-            @Throws(AuthFailureError::class)
-            override fun getHeaders(): Map<String, String> {
-                val headers = HashMap<String, String>()
-                headers["Accept"] = "application/json"
-                return headers
+                        setLoading(false)
+                    },
+                    Response.ErrorListener { error ->
+                        setLoading(false)
+                        try {
+                            val responseBody =
+                                String(error.networkResponse.data, StandardCharsets.UTF_8)
+                            val errors = JSONObject(responseBody)
+                            Toast.makeText(
+                                this@EditMemberGym,
+                                errors.getString("message"),
+                                Toast.LENGTH_SHORT
+                            ).show()
+                        } catch (e: Exception) {
+                            Toast.makeText(this@EditMemberGym, e.message, Toast.LENGTH_SHORT).show()
+                        }
+                    }) {
+                @Throws(AuthFailureError::class)
+                override fun getHeaders(): Map<String, String> {
+                    val headers = HashMap<String, String>()
+                    headers["Accept"] = "application/json"
+                    return headers
 
-            }
+                }
 
-            @Throws(AuthFailureError::class)
-            override fun getBody(): ByteArray {
-                val gson = Gson()
-                val requestBody = gson.toJson(member)
-                return requestBody.toByteArray(StandardCharsets.UTF_8)
-            }
+                @Throws(AuthFailureError::class)
+                override fun getBody(): ByteArray {
+                    val gson = Gson()
+                    val requestBody = gson.toJson(member)
+                    return requestBody.toByteArray(StandardCharsets.UTF_8)
+                }
 
-            override fun getBodyContentType(): String {
-                return "application/json"
-            }
-        }
-        queue!!.add(stringRequest)
-
-    }
+                override fun getBodyContentType(): String {
+                    return "application/json"
+                }
+            }
+            queue!!.add(stringRequest)
+        }
 
-    //Fungsi ini digunakan untuk menampilkan layout Loading
+        //Fungsi ini digunakan untuk menampilkan layout Loading
 
-    private fun setLoading(isLoading: Boolean){
-        if(isLoading){
-            window.setFlags(
-                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,
-                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
-            )
-            layoutLoading!!.visibility = View.VISIBLE
-        }else{
-            window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
-            layoutLoading!!.visibility = View.INVISIBLE
+
+//        @SuppressLint("ObsoleteSdkInt")
+//        @RequiresApi(api = Build.VERSION_CODES.O)
+//        @Throws(
+//            FileNotFoundException::class
+//        )
+//        private fun createPdf(
+//            personalTrainer: String,
+//            membership: String,
+//            tanggal: String,
+//            durasi: String
+//        ) {
+//            //akses writing ke storage hp dalam mode download
+//            val pdfPath =
+//                Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
+//                    .toString()
+//            val file = File(pdfPath, "pdf_17.pdf")
+//            FileOutputStream(file)
+//
+//            //inisialisasi pembuatan PDF
+//            val writer = PdfWriter(file)
+//            val pdfDocument = PdfDocument(writer)
+//            val document = Document(pdfDocument)
+//            pdfDocument.defaultPageSize = PageSize.A4
+//            document.setMargins(5f, 5f, 5f, 5f)
+//            @SuppressLint("useCompatLoadingForDrawables") val d = getDrawable(R.drawable.gym)
+//
+//            //penambahan gambar
+//            val bitmap = (d as BitmapDrawable)!!.bitmap
+//            val stream = ByteArrayOutputStream()
+//            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream)
+//            val bitmapData = stream.toByteArray()
+//            val imageData = ImageDataFactory.create(bitmapData)
+//            val image = Image(imageData)
+//            val namapengguna = Paragraph("Identitas Pengguna").setBold().setFontSize(24f)
+//                .setTextAlignment(TextAlignment.CENTER)
+//            val group = Paragraph(
+//                """
+//                                    Berikut adalah
+//                                    Nama Pengguna UAJY 2022/2023
+//                                """.trimIndent()
+//            ).setTextAlignment(TextAlignment.CENTER).setFontSize(12f)
+//
+//            //pembuatan table
+//            val width = floatArrayOf(100f, 100f)
+//            val table = Table(width)
+//            //pengisian data ke dalam tabel
+//            table.setHorizontalAlignment(HorizontalAlignment.CENTER)
+//            table.addCell(Cell().add(Paragraph("Personal Trainer")))
+//            table.addCell(Cell().add(Paragraph(personalTrainer)))
+//            table.addCell(Cell().add(Paragraph("Membership")))
+//            table.addCell(Cell().add(Paragraph(membership)))
+//            table.addCell(Cell().add(Paragraph("Tanggal")))
+//            table.addCell(Cell().add(Paragraph(tanggal)))
+//            table.addCell(Cell().add(Paragraph("Durasi")))
+//            table.addCell(Cell().add(Paragraph(durasi)))
+//            val dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy")
+//            table.addCell(Cell().add(Paragraph("Tanggal Buat PDF")))
+//            table.addCell(Cell().add(Paragraph(LocalDate.now().format(dateTimeFormatter))))
+//            val timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss a")
+//            table.addCell(Cell().add(Paragraph("Pukul Pembuatan")))
+//            table.addCell(Cell().add(Paragraph(LocalTime.now().format(timeFormatter))))
+//
+//            //pembuatan QR CODE secara generate dengan bantuan IText7
+//            val barcodeQRCode = BarcodeQRCode(
+//                """
+//            $personalTrainer
+//            $membership
+//            $tanggal
+//            $durasi
+//            ${LocalDate.now().format(dateTimeFormatter)}
+//            ${LocalTime.now().format(timeFormatter)}
+//        """.trimIndent()
+//            )
+//            val qrCodeObject = barcodeQRCode.createFormXObject(ColorConstants.BLACK, pdfDocument)
+//            val qrCodeImage = Image(qrCodeObject).setWidth(80f).setHorizontalAlignment(
+//                HorizontalAlignment.CENTER
+//            )
+//
+//            document.add(image)
+//            document.add(namapengguna)
+//            document.add(group)
+//            document.add(table)
+//            document.add(qrCodeImage)
+//
+//            document.close()
+//            Toast.makeText(this, "Pdf Created", Toast.LENGTH_SHORT).show()
+//        }
+
+        private fun setLoading(isLoading: Boolean) {
+            if (isLoading) {
+                window.setFlags(
+                    WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,
+                    WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
+                )
+                layoutLoading!!.visibility = View.VISIBLE
+            } else {
+                window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)
+                layoutLoading!!.visibility = View.INVISIBLE
+            }
         }
     }
-}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_android_black_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_android_black_24.xml b/app/src/main/res/drawable/ic_android_black_24.xml
new file mode 100644
--- /dev/null	
+++ b/app/src/main/res/drawable/ic_android_black_24.xml	
@@ -0,0 +1,5 @@
+<vector android:height="24dp" android:tint="#000000"
+    android:viewportHeight="24" android:viewportWidth="24"
+    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M17.6,9.48l1.84,-3.18c0.16,-0.31 0.04,-0.69 -0.26,-0.85c-0.29,-0.15 -0.65,-0.06 -0.83,0.22l-1.88,3.24c-2.86,-1.21 -6.08,-1.21 -8.94,0L5.65,5.67c-0.19,-0.29 -0.58,-0.38 -0.87,-0.2C4.5,5.65 4.41,6.01 4.56,6.3L6.4,9.48C3.3,11.25 1.28,14.44 1,18h22C22.72,14.44 20.7,11.25 17.6,9.48zM7,15.25c-0.69,0 -1.25,-0.56 -1.25,-1.25c0,-0.69 0.56,-1.25 1.25,-1.25S8.25,13.31 8.25,14C8.25,14.69 7.69,15.25 7,15.25zM17,15.25c-0.69,0 -1.25,-0.56 -1.25,-1.25c0,-0.69 0.56,-1.25 1.25,-1.25s1.25,0.56 1.25,1.25C18.25,14.69 17.69,15.25 17,15.25z"/>
+</vector>
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>buildscript {\r\n    dependencies {\r\n        classpath 'com.google.gms:google-services:4.3.14'\r\n    }\r\n}\r\n\r\nplugins {\r\n    id 'com.android.application' version '7.2.2' apply false\r\n    id 'com.android.library' version '7.2.2' apply false\r\n    id 'org.jetbrains.kotlin.android' version '1.7.10' apply false\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	
+++ b/build.gradle	
@@ -5,9 +5,9 @@
 }
 
 plugins {
-    id 'com.android.application' version '7.2.2' apply false
-    id 'com.android.library' version '7.2.2' apply false
-    id 'org.jetbrains.kotlin.android' version '1.7.10' apply false
+    id 'com.android.application' version '7.3.0' apply false
+    id 'com.android.library' version '7.3.0' apply false
+    id 'org.jetbrains.kotlin.android' version '1.7.20' apply false
 }
 
 task clean(type: Delete) {
Index: app/src/main/java/com/example/ugd1/ProfilFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ugd1\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.RequestQueue\r\nimport com.android.volley.Response\r\nimport com.android.volley.toolbox.StringRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.example.ugd1.api.UserApi\r\nimport com.example.ugd1.databinding.FragmentProfilBinding\r\nimport com.example.ugd1.room.UserDB\r\nimport org.json.JSONObject\r\nimport java.nio.charset.StandardCharsets\r\n\r\n\r\nclass ProfilFragment : Fragment() {\r\n\r\n    private var _binding  : FragmentProfilBinding?= null\r\n    private val binding get() = _binding!!\r\n    private var queue: RequestQueue? = null\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        _binding = FragmentProfilBinding.inflate(inflater, container, false)\r\n        val view = binding.root\r\n        return view\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        queue = Volley.newRequestQueue(activity)\r\n        val sharedPreferences = (activity as HomeActivity).getSharedPreferences()\r\n        var id = sharedPreferences.getInt(\"id\", 0)\r\n        showUser(id)\r\n\r\n        binding.btnUpdate.setOnClickListener {\r\n            transitionFragment(EditProfileFragment())\r\n        }\r\n\r\n        binding.btnLogout.setOnClickListener {\r\n            val moveLogout= Intent(this@ProfilFragment.context, MainActivity::class.java)\r\n            startActivity(moveLogout)\r\n        }\r\n\r\n//        val camera: ImageView = view.findViewById(R.id.homeHospital)\r\n        binding.homeHospital.setOnClickListener {\r\n            val moveCamera = Intent(this@ProfilFragment.context, CameraActivity::class.java)\r\n            startActivity(moveCamera)\r\n        }\r\n    }\r\n\r\n    private fun setProfil() {\r\n        val sharedPreferences = (activity as HomeActivity).getSharedPreferences()\r\n\r\n        val db by lazy { UserDB(activity as HomeActivity) }\r\n        val userDao = db.userDao()\r\n\r\n        val user = userDao.getUser(sharedPreferences.getInt(\"id\", 0))\r\n        binding.viewUsername.setText(user.username)\r\n        binding.viewEmail.setText(user.email)\r\n        binding.viewNomorTelepon.setText(user.nomorTelepon)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        _binding = null\r\n    }\r\n\r\n    private fun transitionFragment(fragment: Fragment) {\r\n        val transition = requireActivity().supportFragmentManager.beginTransaction()\r\n        transition.replace(R.id.fragment_profil, fragment)\r\n            .addToBackStack(null).commit()\r\n        transition.hide(ProfilFragment())\r\n    }\r\n\r\n    private fun showUser(id: Int) {\r\n//        setLoading(true)\r\n        val stringRequest: StringRequest = object :\r\n            StringRequest(Method.GET, UserApi.GET_BY_ID_URL + id, Response.Listener { response ->\r\n                // val gson = Gson()\r\n                // val mahasiswa = gson.fromJson(response, Mahasiswa::class.java)\r\n\r\n                var userObject = JSONObject(response.toString())\r\n                val userData = userObject.getJSONObject(\"data\")\r\n\r\n                binding.viewUsername.setText(userData.getString(\"username\"))\r\n                binding.viewEmail.setText(userData.getString(\"email\"))\r\n                binding.viewNomorTelepon.setText(userData.getString(\"nomorTelepon\"))\r\n\r\n                Toast.makeText(activity, \"Data User berhasil diambil!\", Toast.LENGTH_SHORT).show()\r\n//                setLoading(false)\r\n            }, Response.ErrorListener { error ->\r\n//                setLoading(false)\r\n                try {\r\n                    val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)\r\n                    val errors = JSONObject(responseBody)\r\n                    Toast.makeText(\r\n                        activity,\r\n                        errors.getString(\"message\"),\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }catch (e: Exception) {\r\n                    Toast.makeText(activity, e.message, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }) {\r\n            @Throws(AuthFailureError::class)\r\n            override fun getHeaders(): Map<String, String> {\r\n                val headers = HashMap<String, String>()\r\n                headers[\"Accept\"] = \"application/json\"\r\n                return headers\r\n            }\r\n        }\r\n        queue!!.add(stringRequest)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/ProfilFragment.kt b/app/src/main/java/com/example/ugd1/ProfilFragment.kt
--- a/app/src/main/java/com/example/ugd1/ProfilFragment.kt	
+++ b/app/src/main/java/com/example/ugd1/ProfilFragment.kt	
@@ -49,6 +49,11 @@
             transitionFragment(EditProfileFragment())
         }
 
+        binding.btnQr.setOnClickListener(View.OnClickListener {
+            val moveQr = Intent(this@ProfilFragment.context, QrScan::class.java)
+            startActivity(moveQr)
+        })
+
         binding.btnLogout.setOnClickListener {
             val moveLogout= Intent(this@ProfilFragment.context, MainActivity::class.java)
             startActivity(moveLogout)
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	
+++ b/.idea/gradle.xml	
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: app/src/main/java/com/example/ugd1/api/MemberGymApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ugd1.api\r\n\r\nclass MemberGymApi {\r\n    companion object{\r\n        val BASE_URL =\"http://192.168.0.108/TUBES_API_17/public/api/\"\r\n\r\n        val GET_ALL_URL = BASE_URL + \"memberGym/\"\r\n        val GET_BY_ID_URL = BASE_URL + \"memberGym/\"\r\n        val ADD_URL = BASE_URL + \"memberGym\"\r\n        val UPDATE_URL = BASE_URL + \"memberGym/\"\r\n        val DELETE_URL = BASE_URL + \"memberGym/\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/api/MemberGymApi.kt b/app/src/main/java/com/example/ugd1/api/MemberGymApi.kt
--- a/app/src/main/java/com/example/ugd1/api/MemberGymApi.kt	
+++ b/app/src/main/java/com/example/ugd1/api/MemberGymApi.kt	
@@ -2,7 +2,7 @@
 
 class MemberGymApi {
     companion object{
-        val BASE_URL ="http://192.168.0.108/TUBES_API_17/public/api/"
+        val BASE_URL ="http://192.168.0.101/TUBES_API_17/public/api/"
 
         val GET_ALL_URL = BASE_URL + "memberGym/"
         val GET_BY_ID_URL = BASE_URL + "memberGym/"
Index: app/src/main/res/layout/activity_qr_scan.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_qr_scan.xml b/app/src/main/res/layout/activity_qr_scan.xml
new file mode 100644
--- /dev/null	
+++ b/app/src/main/res/layout/activity_qr_scan.xml	
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:padding="10dp"
+    tools:context=".QrScan">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:text="QR Code Scanner With Google ML Kit"
+            android:textAlignment="center"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:textStyle="bold"
+            android:layout_margin="15dp"
+            style="@style/TextAppearance.AppCompat.Headline"/>
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="10dp"
+            android:orientation="horizontal">
+
+            <com.google.android.material.button.MaterialButton
+                android:id="@+id/cameraBtn"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Kamera"
+                android:layout_marginEnd="5dp"
+                android:layout_weight="1"/>
+
+            <com.google.android.material.button.MaterialButton
+                android:id="@+id/galerryBtn"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Gallery"
+                android:layout_marginEnd="5dp"
+                android:layout_weight="1"/>
+
+        </LinearLayout>
+
+        <ImageView
+            android:id="@+id/imageTv"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_android_black_24"
+            android:adjustViewBounds="true"/>
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/scanBtn"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Scan Result"/>
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            style="@style/TextAppearance.AppCompat.Body1"
+            android:textStyle="bold"
+            android:textAlignment="center"
+            android:text="Result : "/>
+
+        <TextView
+            android:id="@+id/resultView"
+            android:textAlignment="viewStart"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+
+    </LinearLayout>
+</ScrollView>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_member_gym.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <Button\r\n        android:id=\"@+id/btnAdd\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"MEMBERSHIP\"\r\n        android:textSize=\"12dp\"\r\n        android:layout_marginBottom=\"100dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        android:layout_margin=\"10dp\"/>\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_member_gym.xml b/app/src/main/res/layout/fragment_member_gym.xml
--- a/app/src/main/res/layout/fragment_member_gym.xml	
+++ b/app/src/main/res/layout/fragment_member_gym.xml	
@@ -2,7 +2,20 @@
 <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    xmlns:app="http://schemas.android.com/apk/res-auto">
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:context=".MemberGymFragment">
+
+    
+    <ImageView
+        android:id="@+id/imageGlide"
+        android:layout_width="250dp"
+        android:layout_height="250dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toTopOf="@id/btnGlide"
+        android:src="@drawable/gym"/>
 
     <Button
         android:id="@+id/btnAdd"
@@ -15,5 +28,16 @@
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintBottom_toBottomOf="parent"
         android:layout_margin="10dp"/>
+    <Button
+        android:id="@+id/btnGlide"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="Change Image"
+        android:textSize="12dp"
+        android:layout_marginBottom="100dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintBottom_toTopOf="@id/btnAdd"
+        android:layout_margin="10dp"/>
 
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_profil.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:padding=\"20dp\"\r\n    android:background=\"?android:windowBackground\"\r\n    tools:context=\".ProfilFragment\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/textProfil\"\r\n        android:layout_width=\"100dp\"\r\n        android:layout_height=\"40dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        android:text=\"Profile\"\r\n        android:textAlignment=\"center\"\r\n        android:textColor=\"@color/black\"\r\n        app:autoSizeTextType=\"uniform\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <ImageView\r\n        android:id=\"@+id/homeHospital\"\r\n        android:layout_width=\"150dp\"\r\n        android:layout_height=\"150dp\"\r\n        android:layout_marginTop=\"25dp\"\r\n        android:src=\"@drawable/gym\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textProfil\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textUsername\"\r\n        style=\"@style/TextAppearance.MaterialComponents.Headline6\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Username\"\r\n        android:layout_marginTop=\"50dp\"\r\n        android:textColor=\"@color/black\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/homeHospital\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/viewUsername\"\r\n        style=\"@style/TextAppearance.MaterialComponents.Caption\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"12dp\"\r\n        android:padding=\"12dp\"\r\n        android:text=\"\"\r\n        android:textColor=\"@color/black\"\r\n        android:textSize=\"15dp\"\r\n        app:layout_constraintHorizontal_bias=\"0.0\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textUsername\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textEmail\"\r\n        style=\"@style/TextAppearance.MaterialComponents.Headline6\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Email\"\r\n        android:textColor=\"@color/black\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/viewUsername\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/viewEmail\"\r\n        style=\"@style/TextAppearance.MaterialComponents.Caption\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"12dp\"\r\n        android:padding=\"12dp\"\r\n        android:text=\"\"\r\n        android:textColor=\"@color/black\"\r\n        android:textSize=\"15dp\"\r\n        app:layout_constraintHorizontal_bias=\"0.0\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textEmail\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textNoTelp\"\r\n        style=\"@style/TextAppearance.MaterialComponents.Headline6\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Nomor Telepon\"\r\n        android:textColor=\"@color/black\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/viewEmail\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/viewNomorTelepon\"\r\n        style=\"@style/TextAppearance.MaterialComponents.Caption\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"12dp\"\r\n        android:padding=\"12dp\"\r\n        android:text=\"\"\r\n        android:textColor=\"@color/black\"\r\n        android:textSize=\"15dp\"\r\n        app:layout_constraintHorizontal_bias=\"0.0\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textNoTelp\" />\r\n\r\n\r\n        <Button\r\n            android:id=\"@+id/btnUpdate\"\r\n            android:layout_width=\"370dp\"\r\n            android:layout_height=\"35dp\"\r\n            android:layout_marginTop=\"20dp\"\r\n            android:background=\"@color/black\"\r\n            android:backgroundTint=\"@color/white\"\r\n            android:text=\"Update Profil\"\r\n            android:textColor=\"@color/white\"\r\n            android:textSize=\"10sp\"\r\n            android:textStyle=\"bold\"\r\n            android:typeface=\"monospace\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/viewNomorTelepon\"/>\r\n\r\n<!--    <Button-->\r\n<!--        android:id=\"@+id/btnCamera\"-->\r\n<!--        android:layout_width=\"370dp\"-->\r\n<!--        android:layout_height=\"35dp\"-->\r\n<!--        android:layout_marginTop=\"20dp\"-->\r\n<!--        android:background=\"@color/black\"-->\r\n<!--        android:backgroundTint=\"@color/white\"-->\r\n<!--        android:text=\"Camera\"-->\r\n<!--        android:textColor=\"@color/white\"-->\r\n<!--        android:textSize=\"10sp\"-->\r\n<!--        android:textStyle=\"bold\"-->\r\n<!--        android:typeface=\"monospace\"-->\r\n<!--        app:layout_constraintEnd_toEndOf=\"parent\"-->\r\n<!--        app:layout_constraintStart_toStartOf=\"parent\"-->\r\n<!--        app:layout_constraintTop_toBottomOf=\"@+id/btnUpdate\"/>-->\r\n\r\n    <Button\r\n        android:id=\"@+id/btnLogout\"\r\n        android:layout_width=\"370dp\"\r\n        android:layout_height=\"35dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        android:background=\"@color/black\"\r\n        android:backgroundTint=\"@color/white\"\r\n        android:text=\"Logout\"\r\n        android:textColor=\"@color/white\"\r\n        android:textSize=\"10sp\"\r\n        android:textStyle=\"bold\"\r\n        android:typeface=\"monospace\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/btnUpdate\"/>\r\n\r\n\r\n\r\n    <androidx.fragment.app.FragmentContainerView\r\n        android:id=\"@+id/fragment_profil\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_profil.xml b/app/src/main/res/layout/fragment_profil.xml
--- a/app/src/main/res/layout/fragment_profil.xml	
+++ b/app/src/main/res/layout/fragment_profil.xml	
@@ -111,7 +111,7 @@
             android:id="@+id/btnUpdate"
             android:layout_width="370dp"
             android:layout_height="35dp"
-            android:layout_marginTop="20dp"
+            android:layout_marginTop="10dp"
             android:background="@color/black"
             android:backgroundTint="@color/white"
             android:text="Update Profil"
@@ -139,6 +139,22 @@
 <!--        app:layout_constraintStart_toStartOf="parent"-->
 <!--        app:layout_constraintTop_toBottomOf="@+id/btnUpdate"/>-->
 
+    <Button
+        android:id="@+id/btnQr"
+        android:layout_width="370dp"
+        android:layout_height="35dp"
+        android:layout_marginTop="20dp"
+        android:background="@color/black"
+        android:backgroundTint="@color/white"
+        android:text="Qr Scanner"
+        android:textColor="@color/white"
+        android:textSize="10sp"
+        android:textStyle="bold"
+        android:typeface="monospace"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/btnUpdate"/>
+
     <Button
         android:id="@+id/btnLogout"
         android:layout_width="370dp"
@@ -153,7 +169,7 @@
         android:typeface="monospace"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/btnUpdate"/>
+        app:layout_constraintTop_toBottomOf="@+id/btnQr"/>
 
 
 
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'org.jetbrains.kotlin.android'\r\n    id 'kotlin-android-extensions'\r\n    id 'com.google.gms.google-services'\r\n}\r\n\r\napply plugin: 'kotlin-kapt'\r\n\r\n\r\n\r\nandroid {\r\n    compileSdk 32\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.ugd1\"\r\n        minSdk 26\r\n        targetSdk 32\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n\r\n    viewBinding{\r\n        enabled = true\r\n    }\r\n    namespace 'com.example.ugd1'\r\n}\r\n\r\ndependencies {\r\n    implementation 'com.google.firebase:firebase-messaging-ktx:23.0.8'\r\n    def room_version = \"2.4.3\"\r\n    def coroutines_version = \"1.3.9\"\r\n\r\n    implementation 'androidx.core:core-ktx:1.7.0'\r\n    implementation 'androidx.appcompat:appcompat:1.5.0'\r\n    implementation 'com.google.android.material:material:1.6.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\r\n\r\n    implementation \"androidx.room:room-runtime:$room_version\"\r\n    kapt \"androidx.room:room-compiler:$room_version\"\r\n    implementation \"androidx.room:room-ktx:$room_version\"\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version\"\r\n\r\n    implementation 'org.osmdroid:osmdroid-android:6.1.11'\r\n\r\n    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\r\n    implementation 'com.android.volley:volley:1.2.1'\r\n    implementation 'com.google.code.gson:gson:2.8.8'\r\n\r\n    //UI Toast Notification\r\n    implementation 'com.github.Spikeysanju:MotionToast:1.4'\r\n\r\n    //UI Animated Nav Bottom\r\n    implementation 'nl.joery.animatedbottombar:library:1.1.0'\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	
+++ b/app/build.gradle	
@@ -71,6 +71,33 @@
     implementation 'com.github.Spikeysanju:MotionToast:1.4'
 
     //UI Animated Nav Bottom
-    implementation 'nl.joery.animatedbottombar:library:1.1.0'
+//    implementation 'nl.joery.animatedbottombar:library:1.1.0'
     implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
+
+    implementation 'com.github.ismaeldivita:chip-navigation-bar:1.4.0'
+
+    //implementation 'com.itextpdf:itext7-core:7.2.24'
+    implementation 'com.itextpdf:itext7-core:7.1.12'
+    //implementasi PDF Library OpenPDF
+    implementation 'com.github.librepdf:openpdf:1.3.29'
+
+    //implementasi QR Code Scanner
+    implementation 'com.github.yuriy-budiyev:code-scanner:2.3.2'
+
+    //implementasi QR CODE GENERATE
+    implementation 'com.github.kenglxn.qrgen:android:2.6.0'
+    implementation 'com.google.mlkit:barcode-scanning:17.0.2'
+
+    implementation 'com.github.bumptech.glide:glide:4.13.2'
+    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'
+
+    //Unit Testing
+    androidTestImplementation 'androidx.test:runner:1.4.0'
+    androidTestImplementation 'androidx.test:rules:1.4.0'
+    // Optional -- Hamcrest library
+    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
+    // Optional -- UI testing with Espresso
+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
+    // Optional -- UI testing with UI Automator
+    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
 }
\ No newline at end of file
Index: app/src/main/java/com/example/ugd1/QrScan.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/QrScan.kt b/app/src/main/java/com/example/ugd1/QrScan.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/ugd1/QrScan.kt	
@@ -0,0 +1,294 @@
+package com.example.ugd1
+
+import android.annotation.SuppressLint
+import android.app.Activity
+import android.content.ContentValues
+import android.content.Intent
+import android.content.pm.PackageManager
+import android.net.Uri
+import android.os.Bundle
+import android.provider.MediaStore
+import android.util.Log
+import android.view.View
+import android.widget.Toast
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.app.ActivityCompat
+import androidx.core.content.ContextCompat
+import com.google.mlkit.vision.barcode.BarcodeScanner
+import com.google.mlkit.vision.barcode.BarcodeScannerOptions
+import com.google.mlkit.vision.barcode.BarcodeScanning
+import com.google.mlkit.vision.barcode.common.Barcode
+import com.google.mlkit.vision.common.InputImage
+import com.example.ugd1.databinding.ActivityQrScanBinding
+
+class QrScan : AppCompatActivity(), View.OnClickListener {
+//    private var _binding: FragmentQRBinding? = null
+//    private val binding get() = _binding!!
+private lateinit var binding : ActivityQrScanBinding
+    companion object{
+        private const val CAMERA_REQUEST_CODE = 100
+        private const val STORAGE_REQUEST_CODE = 101
+
+        private const val TAG = "MAIN_TAG"
+    }
+
+    private lateinit var cameraPermissions: Array<String>
+    private lateinit var storagePermissions: Array<String>
+
+    private var imageUri: Uri? = null
+
+    private var barcodeScannerOption: BarcodeScannerOptions? = null
+    private var barcodeScanner: BarcodeScanner? = null
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        binding = ActivityQrScanBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+
+        binding.cameraBtn.setOnClickListener(this)
+        binding.galerryBtn.setOnClickListener(this)
+        binding.scanBtn.setOnClickListener(this)
+
+        cameraPermissions = arrayOf(android.Manifest.permission.CAMERA, android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
+        storagePermissions = arrayOf(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
+
+        barcodeScannerOption = BarcodeScannerOptions.Builder()
+            .setBarcodeFormats(Barcode.FORMAT_ALL_FORMATS).build()
+        barcodeScanner = BarcodeScanning.getClient(barcodeScannerOption!!)
+
+    }
+
+    override fun onClick(v: View?) {
+        when(v?.id){
+            R.id.cameraBtn -> {
+                if (checkCameraPermission()){
+                    pickImageCamera()
+                }
+                else{
+                    requestCameraPermission()
+                }
+            }
+            R.id.galerryBtn -> {
+                if (checkStoragePermission()) {
+                    pickImageGallery()
+                }else {
+                    requestStoragePermission()
+                }
+            }
+            R.id.scanBtn -> {
+                if (imageUri == null){
+                    showToast("Pick image first")
+                } else {
+                    detectResultFromImage()
+                }
+            }
+        }
+    }
+
+    private fun checkCameraPermission() : Boolean {
+        val resultcamera = (ContextCompat.checkSelfPermission(this, android.Manifest.permission.CAMERA)
+                == PackageManager.PERMISSION_GRANTED)
+        val resultstorage = (ContextCompat.checkSelfPermission(this, android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
+                == PackageManager.PERMISSION_GRANTED)
+
+        return resultcamera && resultstorage
+    }
+
+    private fun requestCameraPermission() {
+        ActivityCompat.requestPermissions(this,  cameraPermissions, CAMERA_REQUEST_CODE)
+
+    }
+
+    private fun checkStoragePermission(): Boolean {
+        val result = (ContextCompat.checkSelfPermission(this, android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
+                == PackageManager.PERMISSION_GRANTED)
+        return result
+    }
+
+
+    private fun requestStoragePermission() {
+        ActivityCompat.requestPermissions(this,  storagePermissions, STORAGE_REQUEST_CODE)
+
+    }
+
+    private fun onRequestPermissionResult(
+        requestCode: Int,
+        permissions: Array<out String>,
+        grantResults: IntArray
+    ){
+        super.onRequestPermissionsResult(requestCode,permissions,grantResults)
+
+        when(requestCode){
+            CAMERA_REQUEST_CODE -> {
+                if(grantResults.isNotEmpty()){
+                    val cameraAccepted = grantResults[0] == PackageManager.PERMISSION_GRANTED
+                    val storageAccepted= grantResults[1] == PackageManager.PERMISSION_GRANTED
+
+                    if(cameraAccepted && storageAccepted){
+                        pickImageCamera()
+                    }else{
+                        showToast("Camera and storage permission are required")
+                    }
+                }
+            }
+
+
+            STORAGE_REQUEST_CODE -> {
+                if(grantResults.isNotEmpty()){
+                    val storageAccepted = grantResults[0] == PackageManager.PERMISSION_GRANTED
+
+                    if(storageAccepted){
+                        pickImageGallery()
+                    }else{
+                        showToast("Storage are required...")
+                    }
+                }
+            }
+        }
+    }
+
+    private fun showToast(message: String){
+        Toast.makeText(this,message, Toast.LENGTH_SHORT).show()
+    }
+
+    private fun pickImageCamera(){
+        val contentValues = ContentValues()
+        contentValues.put(MediaStore.Images.Media.TITLE,"Foto Sample")
+        contentValues.put(MediaStore.Images.Media.DESCRIPTION,"Deskripsi Foto Sample")
+
+        imageUri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)
+
+        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
+        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri)
+
+        cameraActivityResultLauncher.launch(intent)
+
+    }
+
+    private val cameraActivityResultLauncher = registerForActivityResult(
+        ActivityResultContracts.StartActivityForResult()
+    ){result ->
+        if(result.resultCode == Activity.RESULT_OK){
+            val data = result.data
+            Log.d(TAG,"cameraActivityResultLauncher: imageUri: $imageUri")
+
+            binding.imageTv.setImageURI(imageUri)
+        }
+    }
+
+    private fun pickImageGallery(){
+        val intent = Intent(Intent.ACTION_PICK)
+
+        intent.type = "image/*"
+        galleryActivityResultLauncher.launch(intent)
+    }
+
+
+    private val galleryActivityResultLauncher = registerForActivityResult(
+        ActivityResultContracts.StartActivityForResult()
+    ){result ->
+        if(result.resultCode == Activity.RESULT_OK){
+            val data = result.data
+
+            imageUri = data!!.data
+            Log.d(TAG,"galleryActivityResultLauncher: imageUri: $imageUri")
+
+            binding.imageTv.setImageURI(imageUri)
+        }else{
+            showToast("Dibatalkan......")
+        }
+    }
+
+    private fun detectResultFromImage(){
+        try{
+            val inputImage = InputImage.fromFilePath(this,imageUri!!)
+
+            val barcodeResult = barcodeScanner?.process(inputImage)
+                ?.addOnSuccessListener { barcodes ->
+                    extractbarcodeQrCodeInfo(barcodes)
+                }
+                ?.addOnFailureListener { e->
+                    Log.d(TAG,"detectResultFromImage: ", e)
+                    showToast("failed Scanning due to ${e.message}")
+                }
+
+        }catch (e: Exception){
+            Log.d(TAG,"detectResultFromImage: ", e)
+            showToast("Failed Due To ${e.message}")
+        }
+    }
+
+    @SuppressLint("SetTextI18n")
+    private fun extractbarcodeQrCodeInfo(barcodes: List<Barcode>) {
+        for (barcode in barcodes) {
+            val bound = barcode.boundingBox
+            val corners = barcode.cornerPoints
+            val rawValue = barcode.rawValue
+            Log.d(TAG,"extractbarcodeQrCodeInfo: rawValue: $rawValue")
+            val valueType = barcode.valueType
+            when(valueType) {
+                Barcode.TYPE_WIFI -> {
+                    val typeWifi = barcode.wifi
+                    val ssid = "${typeWifi?.ssid}"
+                    val password = "${typeWifi?.password}"
+                    var encryptionType = "${typeWifi?.encryptionType}"
+                    if (encryptionType == "1"){
+                        encryptionType = "OPEN"
+                    } else if (encryptionType == "2"){
+                        encryptionType = "WPA"
+                    } else if (encryptionType == "3"){
+                        encryptionType = "WEP"
+                    }
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: TYPE_WIFI")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: ssid: $ssid")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: password: $password")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: encryptionType: $encryptionType")
+                    binding.resultView.text =
+                        "TYPE_WIFI \n ssid: $ssid \npassword: $password\nencryptionType: $encryptionType" + "\n\nrawValue : $rawValue"
+                }
+                Barcode.TYPE_URL -> {
+                    val typeUrl = barcode.url
+                    val title = "${typeUrl?.title}"
+                    val url = "${typeUrl?.url}"
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: TYPE_URL")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: title: $title")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: url: $url")
+                    binding.resultView.text = "TYPE_URL \ntitle: $title \nurl: $url \n\nrawValue: $rawValue"
+                }
+                Barcode.TYPE_EMAIL -> {
+                    val typeEmail = barcode.email
+                    val address = "${typeEmail?.address}"
+                    val body = "${typeEmail?.body}"
+                    val subject = "${typeEmail?.subject}"
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: TYPE_EMAIL")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: address: $address")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: body: $body")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: subject: $subject")
+                    binding.resultView.text =
+                        "TYPE_EMAIL \ntitle: $address \nurl: $body\nsubject: $subject \n\nrawValue : $rawValue"
+                }
+                Barcode.TYPE_CONTACT_INFO -> {
+                    val typeContact = barcode.contactInfo
+                    val title = "${typeContact?.title}"
+                    val organisasi = "${typeContact?.organization}"
+                    val name = "${typeContact?.name}"
+                    val phone = "${typeContact?.phones}"
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: TYPE_CONTACT_INFO")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: Title: $title")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: Organization: $organisasi")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: nama: $name")
+                    Log.d(TAG,"extractbarcodeQrCodeInfo: Phone: $phone")
+                    binding.resultView.text = "TYPE_CONTACT_INFO " +
+                            "\ntitle: $title " +
+                            "\nnama: $name " +
+                            "\norganization: $organisasi " +
+                            "\nPhone : $phone" + "\n\nrawValue : $rawValue"
+                }
+                else -> {
+                    binding.resultView.text = "rawValue: $rawValue"
+                }
+            }
+            }
+        }
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/container\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".HomeActivity\">\r\n\r\n<!--    <com.google.android.material.bottomnavigation.BottomNavigationView-->\r\n<!--        android:id=\"@+id/nav_view\"-->\r\n<!--        style=\"@style/Widget.MaterialComponents.BottomNavigationView.Colored\"-->\r\n<!--        android:layout_width=\"0dp\"-->\r\n<!--        android:layout_height=\"wrap_content\"-->\r\n<!--        android:background=\"?android:attr/windowBackground\"-->\r\n<!--        app:backgroundTint=\"@android:color/holo_blue_dark\"-->\r\n<!--        app:layout_constraintBottom_toBottomOf=\"parent\"-->\r\n<!--        app:layout_constraintHorizontal_bias=\"0.0\"-->\r\n<!--        app:layout_constraintLeft_toLeftOf=\"parent\"-->\r\n<!--        app:layout_constraintRight_toRightOf=\"parent\"-->\r\n<!--        app:menu=\"@menu/nav_home\" />-->\r\n\r\n    <nl.joery.animatedbottombar.AnimatedBottomBar\r\n        android:id=\"@+id/nav_home\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:background=\"#050A66\"\r\n        app:abb_indicatorAppearance=\"round\"\r\n        app:abb_indicatorHeight=\"4dp\"\r\n        app:abb_indicatorMargin=\"16dp\"\r\n        app:abb_selectedIndex=\"0\"\r\n        app:abb_indicatorColor=\"#00008B\"\r\n        app:abb_tabColorSelected=\"#3F51B5\"\r\n\r\n        app:abb_selectedTabType=\"text\"\r\n        app:abb_tabs=\"@menu/nav_home\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <androidx.fragment.app.FragmentContainerView\r\n        android:id=\"@+id/layoutFragment\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/nav_home\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_home.xml b/app/src/main/res/layout/activity_home.xml
--- a/app/src/main/res/layout/activity_home.xml	
+++ b/app/src/main/res/layout/activity_home.xml	
@@ -21,23 +21,39 @@
 <!--        app:layout_constraintRight_toRightOf="parent"-->
 <!--        app:menu="@menu/nav_home" />-->
 
-    <nl.joery.animatedbottombar.AnimatedBottomBar
+<!--    <nl.joery.animatedbottombar.AnimatedBottomBar-->
+<!--        android:id="@+id/nav_home"-->
+<!--        android:layout_width="match_parent"-->
+<!--        android:layout_height="wrap_content"-->
+<!--        android:background="#050A66"-->
+<!--        app:abb_indicatorAppearance="round"-->
+<!--        app:abb_indicatorHeight="4dp"-->
+<!--        app:abb_indicatorMargin="16dp"-->
+<!--        app:abb_selectedIndex="0"-->
+<!--        app:abb_indicatorColor="#00008B"-->
+<!--        app:abb_tabColorSelected="#3F51B5"-->
+
+<!--        app:abb_selectedTabType="text"-->
+<!--        app:abb_tabs="@menu/nav_home"-->
+<!--        app:layout_constraintBottom_toBottomOf="parent"-->
+<!--        app:layout_constraintEnd_toEndOf="parent"-->
+<!--        app:layout_constraintStart_toStartOf="parent" />-->
+
+    <com.ismaeldivita.chipnavigation.ChipNavigationBar
         android:id="@+id/nav_home"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:background="#050A66"
-        app:abb_indicatorAppearance="round"
-        app:abb_indicatorHeight="4dp"
-        app:abb_indicatorMargin="16dp"
-        app:abb_selectedIndex="0"
-        app:abb_indicatorColor="#00008B"
-        app:abb_tabColorSelected="#3F51B5"
-
-        app:abb_selectedTabType="text"
-        app:abb_tabs="@menu/nav_home"
+        android:layout_height="60dp"
+        android:layout_alignParentBottom="true"
+        android:layout_gravity="bottom"
+        android:fadingEdge="horizontal"
+        app:cnb_animationDuration="175"
+        app:cnb_unselectedColor="@color/white"
+        app:cnb_badgeColor="@color/white"
+        android:background="@color/black"
+        app:cnb_menuResource="@menu/nav_home"
         app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent" />
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toRightOf="parent"/>
 
     <androidx.fragment.app.FragmentContainerView
         android:id="@+id/layoutFragment"
Index: app/src/main/java/com/example/ugd1/api/UserApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ugd1.api\r\n\r\nclass UserApi {\r\n    companion object{\r\n        val BASE_URL =\"http://10.200.145.238/TUBES_API_17/public/api/\"\r\n\r\n        val GET_ALL_URL = BASE_URL + \"profil/\"\r\n        val GET_BY_ID_URL = BASE_URL + \"profil/\"\r\n        val ADD_URL = BASE_URL + \"register\"\r\n        val UPDATE_URL = BASE_URL + \"profil/\"\r\n        val DELETE_URL = BASE_URL + \"profil/\"\r\n\r\n        val CHECK = BASE_URL + \"login\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ugd1/api/UserApi.kt b/app/src/main/java/com/example/ugd1/api/UserApi.kt
--- a/app/src/main/java/com/example/ugd1/api/UserApi.kt	
+++ b/app/src/main/java/com/example/ugd1/api/UserApi.kt	
@@ -2,7 +2,7 @@
 
 class UserApi {
     companion object{
-        val BASE_URL ="http://10.200.145.238/TUBES_API_17/public/api/"
+        val BASE_URL ="http://192.168.0.101/TUBES_API_17/public/api/"
 
         val GET_ALL_URL = BASE_URL + "profil/"
         val GET_BY_ID_URL = BASE_URL + "profil/"
